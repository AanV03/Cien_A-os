/*
  Archivo: nlpProcessor.js
  Funci√≥n: Analiza la pregunta y detecta entidades y verbos clave desde MongoDB.
  Incluye logs de depuraci√≥n para trazar el an√°lisis.
*/

const nlp = require('compromise');
const Personaje = require('./models/model_personajes');
const Lugar = require('./models/model_lugares');
const Evento = require('./models/model_eventos');
let Objeto;
try {
  Objeto = require('./models/model_objetos');
} catch (e) {
  Objeto = null;
}

// Verbos clave directamente aqu√≠
const verbosClave = {
  morir: ["morir", "muri√≥", "falleci√≥", "pereci√≥", "expir√≥", "dej√≥ de existir", "trascendi√≥", "pereci√≥", "se muri√≥"],
  fundar: ["fundar", "fund√≥", "crear", "cre√≥", "establecer", "estableci√≥", "erigir", "construy√≥", "erigi√≥"],
  nacer: ["nacer", "naci√≥", "nacido", "nacimiento", "nacieron", "vino al mundo", "dio a luz"],
  casar: ["casarse", "matrimonio", "se cas√≥", "uni√≥", "contrajo nupcias", "despos√≥"],
  desaparecer: ["desaparecer", "desapareci√≥", "se desvaneci√≥", "se perdi√≥", "se esfum√≥", "se desintegr√≥"],
  envejecer: ["envejecer", "envejeci√≥", "se volvi√≥ viejo", "se hizo mayor", "cans√≥ con los a√±os"],
  amar: ["amar", "se enamor√≥", "amor", "am√≥", "ador√≥", "quer√≠a", "amaba"],
  partir: ["partir", "sali√≥", "se fue", "abandon√≥", "march√≥", "huy√≥", "emigr√≥", "desapareci√≥", "viaj√≥"],
  regresar: ["regresar", "volvi√≥", "retorn√≥", "regres√≥", "retorn√≥", "reapareci√≥", "se present√≥ de nuevo"],
  escribir: ["escribir", "escribi√≥", "redact√≥", "anot√≥", "dej√≥ escrito", "registr√≥", "document√≥", "transcribi√≥"],
  revelar: ["revelar", "cont√≥", "dijo", "confes√≥", "descubri√≥", "manifest√≥"],
  asesinar: ["matar", "asesinar", "acabar con", "eliminar", "ejecutar", "homicidio", "fue asesinado"],
  leer: ["leer", "ley√≥", "interpret√≥", "consult√≥", "repas√≥"],
  profetizar: ["profetizar", "profetiz√≥", "predijo", "anunci√≥", "vision√≥"],
  imponer: ["imponer", "impuso", "estableci√≥", "domin√≥", "puso orden", "establecer orden", "trajo disciplina", "impuesto"]
};

function escapeRegex(text) {
  return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

function matchFlexible(entidadNormal, textoNormal) {
  if (!entidadNormal || !textoNormal) return false;

  // Coincidencia exacta
  if (textoNormal.includes(entidadNormal)) return true;

  // Coincidencia por palabras individuales del nombre
  const partes = entidadNormal.split(/\s+/); // ej. ['ursula', 'iguaran']
  return partes.some(parte => textoNormal.includes(parte));
}


function limpiarTexto(str) {
  return str
    .toLowerCase()
    .normalize('NFD')
    .replace(/[ÃÄ-ÕØ]/g, '');
}

function normalizar(texto) {
  const textoNormalizado = nlp(texto)
    .normalize({ punctuation: true, plurals: true })
    .out('text');
  const limpio = limpiarTexto(textoNormalizado);
  console.log('üîß [nlpProcessor] Texto normalizado:', limpio);
  return limpio;
}

async function buscarEventoSimilar(pregunta) {
  console.log('üîç [FuzzySearch] Iniciando b√∫squeda de evento similar...');

  const texto = normalizar(pregunta);
  console.log('üîß [FuzzySearch] Texto normalizado:', texto);

  let eventos;
  try {
    eventos = await Evento.find({}, 'nombre descripcion');
  } catch (error) {
    console.error('‚ùå [FuzzySearch] Error al obtener eventos:', error);
    return null;
  }

  if (!eventos.length) {
    console.warn('‚ö†Ô∏è [FuzzySearch] No hay eventos en la base de datos.');
    return null;
  }

  const calcularScore = (a, b) => {
    const palabrasA = new Set(a.split(' '));
    const palabrasB = new Set(b.split(' '));
    const interseccion = [...palabrasA].filter(p => palabrasB.has(p));
    return interseccion.length / Math.max(palabrasA.size, 1);
  };

  const candidatos = eventos.map(e => {
    const combinado = limpiarTexto(`${e.nombre} ${e.descripcion || ''}`);
    const score = calcularScore(texto, combinado);
    console.log(`üìÑ [FuzzySearch] Evento: "${e.nombre}" => Score: ${score.toFixed(3)}`);
    return { evento: e, score };
  }).sort((a, b) => b.score - a.score);

  const top = candidatos[0];
  if (top && top.score > 0.2) {
    console.log(`‚úÖ [FuzzySearch] Mejor coincidencia: "${top.evento.nombre}" con score ${top.score.toFixed(3)}`);
    return top.evento;
  } else {
    console.log('‚ùå [FuzzySearch] No se encontr√≥ ning√∫n evento suficientemente similar.');
    return null;
  }
}

function extraerAlias(nombreCompleto) {
  const aliasMatch = nombreCompleto.match(/\((.*?)\)/);
  const alias = aliasMatch ? aliasMatch[1] : null;
  const limpio = nombreCompleto.replace(/\s*\(.*?\)\s*/g, '').trim();
  return {
    nombre: limpiarTexto(limpio),
    alias: alias ? limpiarTexto(alias) : null,
    original: nombreCompleto
  };
}

async function analizarPregunta(pregunta) {
  console.log('üîç [nlpProcessor] Pregunta cruda:', pregunta);
  const texto = normalizar(pregunta);
  const capMatch = texto.match(/cap[i√≠]tulo\s*(\d+)/);
  const capitulo = capMatch ? parseInt(capMatch[1], 10) : null;
  console.log('üî¢ [nlpProcessor] Cap√≠tulo detectado:', capitulo);

  const personajesBD = await Personaje.find({}, 'nombre');
  const lugaresBD = await Lugar.find({}, 'nombre');
  const objetosBD = Objeto ? await Objeto.find({}, 'nombre') : [];

  const personajes = personajesBD.filter(p => {
    const { nombre, alias, original } = extraerAlias(p.nombre);
    const nombreMatch = matchFlexible(nombre, texto);
    const aliasMatch = alias && matchFlexible(alias, texto);
    const matched = nombreMatch || aliasMatch;
    if (nombreMatch || aliasMatch) {
      const porAlias = aliasMatch ? ' (alias)' : '';
      console.log(`üü¢ [MATCH] Personaje detectado: "${p.nombre}"${porAlias}`);
    }
    return matched;
  }).map(p => p.nombre);

  const lugares = lugaresBD
    .map(l => ({ original: l.nombre, normal: limpiarTexto(l.nombre) }))
    .filter(l => matchFlexible(l.normal, texto))
    .map(l => l.original);

  const objetos = objetosBD
    .map(o => ({ original: o.nombre, normal: limpiarTexto(o.nombre) }))
    .filter(o => matchFlexible(o.normal, texto))
    .map(o => o.original);

  console.log('üë§ [nlpProcessor] Personajes detectados:', personajes);
  console.log('üìç [nlpProcessor] Lugares detectados:', lugares);
  console.log('üì¶ [nlpProcessor] Objetos detectados:', objetos);

  // ----------------------
  // Reemplazar el bloque de detecci√≥n de verbos por este bloque:
  const regexVerbos = [];       // aqu√≠ almacenaremos RegExp para la consulta en BD
  const verbosDetectados = [];  // opcional, para logging o contexto

  // normalizar pregunta para detecci√≥n (sin tildes, min√∫sculas)
  const textoNorm = limpiarTexto(pregunta); // o la funci√≥n que uses para normalizar en min√∫sculas y quitar diacr√≠ticos

  for (const [clave, formas] of Object.entries(verbosClave)) {
    for (const forma of formas) {
      // Normalizamos la forma para detectar en la pregunta
      const formaNorm = limpiarTexto(forma);
      const reDetect = new RegExp(`\\b${escapeRegex(formaNorm)}\\b`, 'i');
      if (reDetect.test(textoNorm)) {
        // Se detect√≥ esta forma en la pregunta
        verbosDetectados.push({ clave, formaEncontrada: forma });
        // Ahora construimos regex para todas las variantes literales de esta clave
        for (const f of formas) {
          // Escapamos caracteres especiales, mantenemos tildes literales
          const escapedLiteral = escapeRegex(f);
          regexVerbos.push(new RegExp(`\\b${escapedLiteral}\\b`, 'i'));
        }
        break; // pasamos al siguiente verboClave
      }
    }
  }

  console.log('‚úèÔ∏è [nlpProcessor] Verbos detectados:', verbosDetectados);

  const fuzzy = await buscarEventoSimilar(pregunta);

  return {
    capitulo,
    regexVerbos,               // usado en preguntas.js
    personajes,                // <-- ESTO s√≠ lo espera preguntas.js
    lugares,                   // <-- ESTO tambi√©n
    objetos,                   // opcional, si lo necesitas luego
    fuzzy                      // por si preguntas.js lo usa
  };


}

module.exports = { analizarPregunta, normalizar };
